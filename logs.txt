4/24: bug discovered: floating point error in intersection computation causes breakpoint computations to behave erratically, destroying the beachline

BST invariant is sometimes broken; breakpoint not being deleted properly on circle event

Circle event error: circle events being processed when they don't actually occur, min example 4 points with circle event of top three points being the last potential event (and does not occur) - fixed

Sphere implementation: attempt at using beachline approach failed because the necessary systems of equations could not be solved in a reasonable amount of time for simple test points (did not terminate at all) - sympy wasn't fast enough using spherical coordinates, cylindrical coordinates, or rectangular coordinates (not even the algebraic equation could be solved for the last)

Solution: instead use the projection algorithm Voronoi diagrams on the sphere (Na, Lee, Cheong)
https://reader.elsevier.com/reader/sd/pii/S0925772102000779?token=EEA598061CF04B28E862C8B8D2F7BF7EBA2CE060B846C099A0E6D8C673664FCE11E8AA0D93BC2865F54C373AD49941E3

4/25:
bug found when attempting to project; sometimes the same event in the plane is processed twice as a circle event due to rounding errors; the event is processed and the new beachline is found to have the same potential circle event but the < comparison fails due to floating point error
this bug was unnoticed in the plane implementation but it becomes relevant in the sphere implementation because the second processing attempts to add the circumcenter of only two points, which fails
fix: stronger condition on ignoring circle events - ignore if only 3 beachline elements lie above it

4/26:
bug found for projecting back on sphere: problem of determining directionality of arcs and locations of voronoi vertices (some are the antipodes of the correct ones)
arcs resolved by determining whether midpoint of sites (in the plane) is on Voronoi edge and doing the same computation on the sphere
plan to resolve vertices by checking if projection of spherical circumcenter lands inside the circumcircle of the projected points
